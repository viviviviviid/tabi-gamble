{"language":"Solidity","sources":{"tabi/tabiContractForInteraction/gamble.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ncontract TabiGamble {\n    event NewGamble(address gambler, uint256 amount);\n    event GambleResult(address gambler, bool result);\n    event NewRandomNumber(uint256 randNum);\n\n    uint256 _maxStake = 1e17; // 0.1 ETH\n    uint256 _nonce = 0;\n    address public owner;\n\n    // 생성자를 사용하여 소유자 주소 초기화\n    constructor() {\n        owner = 0xc3556BA1e56F9FD263fF8196B3B783BD14D90AD8;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Caller is not the owner\");\n        _;\n    }\n\n    function _generateRandNum() private view returns (uint) {\n        return uint(keccak256(abi.encodePacked(block.timestamp, msg.sender, _nonce))) % 100;\n    }\n\n    function CheckResult() private returns (bool) {\n        uint256 randNum = _generateRandNum();\n        bool result = randNum % 2 == 0;\n        emit GambleResult(msg.sender, result);\n        return result;\n    }\n\n    function SendAll() public payable onlyOwner {\n        (bool sent, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(sent, \"Failed to send Ether\");\n    }\n\n    function Deposit() public payable onlyOwner {\n    }\n\n    function GambleStart() public payable {\n        require(msg.value <= _maxStake, \"Gamble amount must be lower than 0.1 ETH\");\n        require(msg.value <= address(this).balance, \"Contract wallet doesn't have enough balance\");\n        emit NewGamble(msg.sender, msg.value);\n\n        if (CheckResult()) {\n            uint256 prize = 3 * msg.value; // 이미 1만큼 들어왔으니 2배 이득을 주려면, 총 3배를 줘야 함\n            (bool sent, ) = payable(msg.sender).call{value: prize}(\"\");\n            require(sent, \"Failed to send Ether\");\n        }\n    }\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"":["ast"],"*":["abi","metadata","devdoc","userdoc","storageLayout","evm.legacyAssembly","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","evm.gasEstimates","evm.assembly"]}},"remappings":[]}}